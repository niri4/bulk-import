require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Admin::EmployeesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Employee. As you add validations to Employee, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      company: 1,
      file: fixture_file_upload(file_fixture('valid_sample.csv'), 'text/csv')
    }
  }

  let(:invalid_attributes) {
    {
      company: 1,
      file: fixture_file_upload(file_fixture('invalid_sample.csv'), 'text/csv')
    }
  }

  let(:invalid_format_attributes) {
    {
      company: nil,
      file: fixture_file_upload(file_fixture('dummy.pdf'))
    }
  }

  before do
    sign_in Admin.first
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Admin::EmployeesController. Be sure to keep this updated too.


  describe "GET new" do
    it "assigns a companies as @companies" do
      get :new, {}
      expect(assigns(:companies).length).to be(Company.count)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a bulk of employees" do
        expect {
          post :create, params: {bulk_import: valid_attributes}
        }.to change(Employee, :count).by(3)
      end

      it "redirects back to admin employee new page" do
        post :create, params: { bulk_import: valid_attributes}
        expect(response.status).to eq(302)
        expect(flash[:notice]).to eq("successfully imported employees imported: 4 and not imported 0")
      end
    end

    describe "with invalid file format params" do
      it "company not present" do
        post :create, params: { bulk_import: invalid_format_attributes}
        expect(response.status).to eq(302)
        expect(flash[:alert]).to eq("File type or company is invalid")
      end

      it "File Type is invalid" do
        post :create, params: { bulk_import: invalid_format_attributes}
        expect(response.status).to eq(302)
        expect(flash[:alert]).to eq("File type or company is invalid")
      end
    end

    describe "with invalid params" do
      it "not have any email" do
        post :create, params: { bulk_import: invalid_attributes}
        expect(response.status).to eq(302)
        expect(flash[:notice]).to eq("successfully imported employees imported: 3 and not imported 2")
      end

      it "not follow the email rule" do
        post :create, params: { bulk_import: invalid_attributes}
        expect(response.status).to eq(302)
        expect(flash[:notice]).to eq("successfully imported employees imported: 3 and not imported 2")
      end
    end
  end
end
